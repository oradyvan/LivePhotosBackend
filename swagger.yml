swagger: "2.0"
info:
  description: This is the swagger file that goes with Live Photos backend server code
  version: "1.0.0"
  title: Swagger Live Photos Backend
consumes:
  - application/json
produces:
  - application/json

basePath: /photos

# Paths supported by the server application
paths:
  /live:
    post:
      operationId: live.upload_photo
      tags:
        - Live Photos
      summary: Create new Live Photo
      description: Upload new still image of a new Live Photo item
      consumes:
        - multipart/form-data
      parameters:
        - in: formData
          name: upfile
          type: file
          description: The file to be uploaded
      responses:
        200:
          description: Successfully created new Live Photo
          schema:
             type: object
             properties:
               Identifier:
                 type: string
                 description: Unique identifier of a Live Photo, matches still image identifier
               IsLivePhoto:
                 type: boolean
                 description: Always 'true' for Live Photo, considered 'false' if omitted
               Mime:
                 type: string
                 description: MIME type of a still image of the Live Photo
               Timestamp:
                 type: string
                 description: Date/time of the moment the still image was taken, in UTC time zone
               TimestampKind:
                 type: string
                 description: For backward compatibility this should always be 'Utc'

    get:
      operationId: live.read_all
      tags:
        - Live Photos
      summary: Entire list of Live Photos
      description: Read the list of Live Photos
      responses:
        200:
          description: Successfully read Live Photos list
          schema:
             type: array
             items:
                 properties:
                   Identifier:
                     type: string
                     description: Unique identifier of a Live Photo, matches still image identifier
                   IsLivePhoto:
                     type: boolean
                     description: Always 'true' for Live Photo, considered 'false' if omitted
                   Mime:
                     type: string
                     description: MIME type of a still image of the Live Photo
                   Timestamp:
                     type: string
                     description: Date/time of the moment the still image was taken, in UTC time zone
                   TimestampKind:
                     type: string
                     description: For backward compatibility this should always be 'Utc'

# OpenAPI 3 only: Supported objects returned in various responses
#components:
#  schemas:
#    LivePhotoAsset:
#      type: object
#      properties:
#        Identifier:
#          type: string
#          description: Unique identifier of a Live Photo, matches still image identifier
#        IsLivePhoto:
#          type: boolean
#          description: Always 'true' for Live Photo, considered 'false' if omitted
#        Mime:
#          type: string
#          description: MIME type of a still image of the Live Photo
#        Timestamp:
#          type: string
#          description: Date/time of the moment the still image was taken, in UTC time zone
#        TimestampKind:
#          type: string
#          description: For backward compatibility this should always be 'Utc'
#
#    ArrayOfLivePhotos:
#      type: array
#      items:
#        $ref: '#/components/schemas/LivePhotoAsset'

#    post:
#      operationId: people.create
#      tags:
#        - people
#      summary: Create a person and add it to the people list
#      description: Create a new person in the people list
#      parameters:
#        - name: person
#          in: body
#          description: Person to create
#          required: True
#          schema:
#            type: object
#            properties:
#              fname:
#                type: string
#                description: First name of person to create
#              lname:
#                type: string
#                description: Last name of person to create
#      responses:
#        201:
#          description: Successfully created person in list
#
#  /people/{lname}:
#    get:
#      operationId: people.read_one
#      tags:
#        - people
#      summary: Read one person from the people list
#      description: Read one person from the people list
#      parameters:
#        - name: lname
#          in: path
#          description: Last name of the person to get from the list
#          type: string
#          required: True
#      responses:
#        200:
#          description: Successfully read person from people list operation
#          schema:
#            properties:
#              fname:
#                type: string
#              lname:
#                type: string
#              timestamp:
#                type: string
#
#    put:
#      operationId: people.update
#      tags:
#        - people
#      summary: Update a person in the people list
#      description: Update a person in the people list
#      parameters:
#        - name: lname
#          in: path
#          description: Last name of the person to update in the list
#          type: string
#          required: True
#        - name: person
#          in: body
#          schema:
#            type: object
#            properties:
#              fname:
#                type: string
#              lname:
#                type: string
#      responses:
#        200:
#          description: Successfully updated person in people list
#
#    delete:
#      operationId: people.delete
#      tags:
#        - people
#      summary: Delete a person from the people list
#      description: Delete a person
#      parameters:
#        - name: lname
#          in: path
#          type: string
#          required: True
#      responses:
#        200:
#          description: Successfully deleted a person from people list
